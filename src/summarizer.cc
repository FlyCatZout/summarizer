/**
 *		Summarizer.cpp
 *
 *	1. Read file from disk.
 *	2. Explode file into array, each sentence becomes a Vertex.
 *	3. Build graph from the vertices.
 *	4. Run PageRank on graph.
 *	5. Extract summary based on the rank of each Vertex.
 *
 *	Classes:
 *		• Text - Reads and explode text file.
 *    	• Vertex<T> - A vertex of some type to build graph from
 *		• Graph - The graph to be ranked.
 *		• PageRank - Performes a rank on any given graph.
 * 		• Summarizer - Performes the summarizing of a text.
 * 
 *  Compare: Each time Vertex<T> is used a compare function must be written
 *          float compareTo(Vertex *neighbor);
 */
#include <stdio.h>
#include <tgmath.h>
#include <string.h>
#include "Vertex.h"
#include "Vertex.cpp"
#include "Graph.cpp"
#include <locale>

using namespace std;


std::vector<std::string> swedishStopWords = { 
"a",
"a's",
"able",
"about",
"above",
"according",
"accordingly",
"across",
"actually",
"after",
"afterwards",
"again",
"against",
"ain't",
"all",
"allow",
"allows",
"almost",
"alone",
"along",
"already",
"also",
"although",
"always",
"am",
"among",
"amongst",
"an",
"and",
"another",
"any",
"anybody",
"anyhow",
"anyone",
"anything",
"anyway",
"anyways",
"anywhere",
"apart",
"appear",
"appreciate",
"appropriate",
"are",
"aren't",
"around",
"as",
"aside",
"ask",
"asking",
"associated",
"at",
"available",
"away",
"awfully",
"b",
"be",
"became",
"because",
"become",
"becomes",
"becoming",
"been",
"before",
"beforehand",
"behind",
"being",
"believe",
"below",
"beside",
"besides",
"best",
"better",
"between",
"beyond",
"both",
"brief",
"but",
"by",
"c",
"c'mon",
"c's",
"came",
"can",
"can't",
"cannot",
"cant",
"cause",
"causes",
"certain",
"certainly",
"changes",
"clearly",
"co",
"com",
"come",
"comes",
"concerning",
"consequently",
"consider",
"considering",
"contain",
"containing",
"contains",
"corresponding",
"could",
"couldn't",
"course",
"currently",
"d",
"definitely",
"described",
"despite",
"did",
"didn't",
"different",
"do",
"does",
"doesn't",
"doing",
"don't",
"done",
"down",
"downwards",
"during",
"e",
"each",
"edu",
"eg",
"eight",
"either",
"else",
"elsewhere",
"enough",
"entirely",
"especially",
"et",
"etc",
"even",
"ever",
"every",
"everybody",
"everyone",
"everything",
"everywhere",
"ex",
"exactly",
"example",
"except",
"f",
"far",
"few",
"fifth",
"first",
"five",
"followed",
"following",
"follows",
"for",
"former",
"formerly",
"forth",
"four",
"from",
"further",
"furthermore",
"g",
"get",
"gets",
"getting",
"given",
"gives",
"go",
"goes",
"going",
"gone",
"got",
"gotten",
"greetings",
"h",
"had",
"hadn't",
"happens",
"hardly",
"has",
"hasn't",
"have",
"haven't",
"having",
"he",
"he's",
"hello",
"help",
"hence",
"her",
"here",
"here's",
"hereafter",
"hereby",
"herein",
"hereupon",
"hers",
"herself",
"hi",
"him",
"himself",
"his",
"hither",
"hopefully",
"how",
"howbeit",
"however",
"i",
"i'd",
"i'll",
"i'm",
"i've",
"ie",
"if",
"ignored",
"immediate",
"in",
"inasmuch",
"inc",
"indeed",
"indicate",
"indicated",
"indicates",
"inner",
"insofar",
"instead",
"into",
"inward",
"is",
"isn't",
"it",
"it'd",
"it'll",
"it's",
"its",
"itself",
"j",
"just",
"k",
"keep",
"keeps",
"kept",
"know",
"knows",
"known",
"l",
"last",
"lately",
"later",
"latter",
"latterly",
"least",
"less",
"lest",
"let",
"let's",
"like",
"liked",
"likely",
"little",
"look",
"looking",
"looks",
"ltd",
"m",
"mainly",
"many",
"may",
"maybe",
"me",
"mean",
"meanwhile",
"merely",
"might",
"more",
"moreover",
"most",
"mostly",
"much",
"must",
"my",
"myself",
"n",
"name",
"namely",
"nd",
"near",
"nearly",
"necessary",
"need",
"needs",
"neither",
"never",
"nevertheless",
"new",
"next",
"nine",
"no",
"nobody",
"non",
"none",
"noone",
"nor",
"normally",
"not",
"nothing",
"novel",
"now",
"nowhere",
"o",
"obviously",
"of",
"off",
"often",
"oh",
"ok",
"okay",
"old",
"on",
"once",
"one",
"ones",
"only",
"onto",
"or",
"other",
"others",
"otherwise",
"ought",
"our",
"ours",
"ourselves",
"out",
"outside",
"over",
"overall",
"own",
"p",
"particular",
"particularly",
"per",
"perhaps",
"placed",
"please",
"plus",
"possible",
"presumably",
"probably",
"provides",
"q",
"que",
"quite",
"qv",
"r",
"rather",
"rd",
"re",
"really",
"reasonably",
"regarding",
"regardless",
"regards",
"relatively",
"respectively",
"right",
"s",
"said",
"same",
"saw",
"say",
"saying",
"says",
"second",
"secondly",
"see",
"seeing",
"seem",
"seemed",
"seeming",
"seems",
"seen",
"self",
"selves",
"sensible",
"sent",
"serious",
"seriously",
"seven",
"several",
"shall",
"she",
"should",
"shouldn't",
"since",
"six",
"so",
"some",
"somebody",
"somehow",
"someone",
"something",
"sometime",
"sometimes",
"somewhat",
"somewhere",
"soon",
"sorry",
"specified",
"specify",
"specifying",
"still",
"sub",
"such",
"sup",
"sure",
"t",
"t's",
"take",
"taken",
"tell",
"tends",
"th",
"than",
"thank",
"thanks",
"thanx",
"that",
"that's",
"thats",
"the",
"their",
"theirs",
"them",
"themselves",
"then",
"thence",
"there",
"there's",
"thereafter",
"thereby",
"therefore",
"therein",
"theres",
"thereupon",
"these",
"they",
"they'd",
"they'll",
"they're",
"they've",
"think",
"third",
"this",
"thorough",
"thoroughly",
"those",
"though",
"three",
"through",
"throughout",
"thru",
"thus",
"to",
"together",
"too",
"took",
"toward",
"towards",
"tried",
"tries",
"truly",
"try",
"trying",
"twice",
"two",
"u",
"un",
"under",
"unfortunately",
"unless",
"unlikely",
"until",
"unto",
"up",
"upon",
"us",
"use",
"used",
"useful",
"uses",
"using",
"usually",
"uucp",
"v",
"value",
"various",
"very",
"via",
"viz",
"vs",
"w",
"want",
"wants",
"was",
"wasn't",
"way",
"we",
"we'd",
"we'll",
"we're",
"we've",
"welcome",
"well",
"went",
"were",
"weren't",
"what",
"what's",
"whatever",
"when",
"whence",
"whenever",
"where",
"where's",
"whereafter",
"whereas",
"whereby",
"wherein",
"whereupon",
"wherever",
"whether",
"which",
"while",
"whither",
"who",
"who's",
"whoever",
"whole",
"whom",
"whose",
"why",
"will",
"willing",
"wish",
"with",
"within",
"without",
"won't",
"wonder",
"would",
"would",
"wouldn't",
"x",
"y",
"yes",
"yet",
"you",
"you'd",
"you'll",
"you're",
"you've",
"your",
"yours",
"yourself",
"yourselves",
"z",
"zero"
	

	
/*
"aderton",
"adertonde",
"adjö",
"aldrig",
"alla",
"allas",
"allt",
"alltid",
"alltså",
"än",
"andra",
"andras",
"annan",
"annat",
"ännu",
"artonde",
"artonn",
"åtminstone",
"att",
"åtta",
"åttio",
"åttionde",
"åttonde",
"av",
"även",
"båda",
"bådas",
"bakom",
"bara",
"bäst",
"bättre",
"behöva",
"behövas",
"behövde",
"behövt",
"beslut",
"beslutat",
"beslutit",
"bland",
"blev",
"bli",
"blir",
"blivit",
"bort",
"borta",
"bra",
"då",
"dag",
"dagar",
"dagarna",
"dagen",
"där",
"därför",
"de",
"del",
"delen",
"dem",
"den",
"deras",
"dess",
"det",
"detta",
"dig",
"din",
"dina",
"dit",
"ditt",
"dock",
"du",
"efter",
"eftersom",
"elfte",
"eller",
"elva",
"en",
"enkel",
"enkelt",
"enkla",
"enligt",
"er",
"era",
"ert",
"ett",
"ettusen",
"få ",
"fanns",
"får",
"fått ",
"fem",
"femte",
"femtio",
"femtionde",
"femton",
"femtonde",
"fick",
"fin",
"finnas",
"finns",
"fjärde",
"fjorton",
"fjortonde",
"fler",
"flera",
"flesta",
"följande",
"för",
"före",
"förlåt",
"förra",
"första",
"fram",
"framför",
"från",
"fyra",
"fyrtio",
"fyrtionde",
"gå",
"gälla",
"gäller",
"gällt",
"går",
"gärna",
"gått",
"genast",
"genom",
"gick",
"gjorde",
"gjort",
"god",
"goda",
"godare",
"godast",
"gör",
"göra",
"gott",
"ha",
"hade",
"haft",
"han",
"hans",
"har",
"här",
"heller",
"hellre",
"helst",
"helt",
"henne",
"hennes",
"hit",
"hög",
"höger",
"högre",
"högst",
"hon",
"honom",
"hundra",
"hundraen",
"hundraett",
"hur",
"i",
"ibland",
"idag",
"igår",
"igen",
"imorgon",
"in",
"inför",
"inga",
"ingen",
"ingenting",
"inget",
"innan",
"inne",
"inom",
"inte",
"inuti",
"ja",
"jag",
"jämfört",
"kan",
"kanske",
"knappast",
"kom",
"komma",
"kommer",
"kommit",
"kr",
"kunde",
"kunna",
"kunnat",
"kvar",
"länge",
"längre",
"långsam",
"långsammare",
"långsammast",
"långsamt",
"längst",
"långt",
"lätt",
"lättare",
"lättast",
"legat",
"ligga",
"ligger",
"lika",
"likställd",
"likställda",
"lilla",
"lite",
"liten",
"litet",
"man",
"många",
"måste",
"med",
"mellan",
"men",
"mer",
"mera",
"mest",
"mig",
"min",
"mina",
"mindre",
"minst",
"mitt",
"mittemot",
"möjlig",
"möjligen",
"möjligt",
"möjligtvis",
"mot",
"mycket",
"någon",
"någonting",
"något",
"några",
"när",
"nästa",
"ned",
"nederst",
"nedersta",
"nedre",
"nej",
"ner",
"ni",
"nio",
"nionde",
"nittio",
"nittionde",
"nitton",
"nittonde",
"nödvändig",
"nödvändiga",
"nödvändigt",
"nödvändigtvis",
"nog",
"noll",
"nr",
"nu",
"nummer",
"och",
"också",
"ofta",
"oftast",
"olika",
"olikt",
"om",
"oss",
"över",
"övermorgon",
"överst",
"övre",
"på",
"rakt",
"rätt",
"redan",
"så",
"sade",
"säga",
"säger",
"sagt",
"samma",
"sämre",
"sämst",
"sedan",
"senare",
"senast",
"sent",
"sex",
"sextio",
"sextionde",
"sexton",
"sextonde",
"sig",
"sin",
"sina",
"sist",
"sista",
"siste",
"sitt",
"sjätte",
"sju",
"sjunde",
"sjuttio",
"sjuttionde",
"sjutton",
"sjuttonde",
"ska",
"skall",
"skulle",
"slutligen",
"små",
"smått",
"snart",
"som",
"stor",
"stora",
"större",
"störst",
"stort",
"tack",
"tidig",
"tidigare",
"tidigast",
"tidigt",
"till",
"tills",
"tillsammans",
"tio",
"tionde",
"tjugo",
"tjugoen",
"tjugoett",
"tjugonde",
"tjugotre",
"tjugotvå",
"tjungo",
"tolfte",
"tolv",
"tre",
"tredje",
"trettio",
"trettionde",
"tretton",
"trettonde",
"två",
"tvåhundra",
"under",
"upp",
"ur",
"ursäkt",
"ut",
"utan",
"utanför",
"ute",
"vad",
"vänster",
"vänstra",
"var",
"vår",
"vara",
"våra",
"varför",
"varifrån",
"varit",
"varken",
"värre",
"varsågod",
"vart",
"vårt",
"vem",
"vems",
"verkligen",
"vi",
"vid",
"vidare",
"viktig",
"viktigare",
"viktigast",
"viktigt",
"vilka",
"vilken",
"vilket",
"vill"
*/
};


void print_vector(vector<string> v) {
	for (int i = 0; i < (int)v.size(); i++)
	{
		cout<<v[i];
		cout<<"\n";
	}
}

template<typename T>
void print_summary(Graph<T> graph) {
	for (unsigned int i = 0; i < graph.getVertices().size(); ++i)
	{
		cout<<graph.getVertexAtIndex(i)->getContent()<<" ";
	}
}


/**
 *	this may not be a good solution.
 *	depends on punctuation characters, change to character boundaries. 
 *	Do some thing to the size-1, to remove null string after punctuation
 */
vector<string> explode(string str) {
	vector<string> v;
	string word = "";
	for (int i = 0; i < (int)str.length(); i++)
	{
		if (str[i] == ' ' || str[i] == '.')
		{
			v.push_back(word);
			if (str[i+1] == '\0') {
				// EOS
			} else {
				word = "";
			}
		} else {
			word.push_back(str[i]);
		}
	}
	return v;
}

string toLower(string word) {
	for (unsigned int i = 0; i < word.size(); ++i)
	{
		word[i] = tolower(word[i]);
	}
	return word;
}

bool isStopWord(string word) {
	word = toLower(word);
	for (string s : swedishStopWords)
	{
		if (word.compare(s) == 0)
		{
			return true;
		}
	}
	return false;	
}


/**
 *	Initializes all objects needed to do a summarization.
 *
 *
 */
Graph<string> initializeGraph(string article) {
	/**
	 *	For each sentence in the text create a vertex
	 *	Add each vertex to a graph
	 *	retern graph
	 */
	Graph<string> graph;
	int start = 0;
	for (unsigned int i = 1; i < article.size(); ++i) {
		if ((article[i] == ' ' && (article[i-1] == '.' || article[i-1] == '?' || article[i-1] == '!')) || article[i] == '\0') {
			string temp = article.substr(start, (i - start));
			Vertex<string> *v = new Vertex<string>(temp);
			graph.addVertex(v);
			start = i+1;
		}
	}
	string temp = article.substr(start, article.size());
	Vertex<string> *v = new Vertex<string>(temp);
	graph.addVertex(v);

	return graph;
} 


/**
 *	Compares to vertices
 *	returns a float value based on their similarity
 */
template<typename string>
double Vertex<string>::compareTo(Vertex<string> *neighbor) {
	double similarity = 0.0;

	vector<string> S1 = explode(getContent());
	vector<string> S2 = explode(neighbor->getContent());

	//Here we maybe should remove duplicated words

	int numEqualWords = 0;
	for (unsigned int i = 0; i < S1.size(); i++){
		if (!isStopWord(S1[i])) {
			for (unsigned int j = 0; j < S2.size(); j++) {
				//compare the two.
				if (toLower(S1[i]).compare(toLower(S2[j])) == 0)
				{
					numEqualWords++;		
				}
			}
		}
	}
	similarity = numEqualWords/(log10(S1.size()) + log10(S2.size()));
	return similarity;
}


